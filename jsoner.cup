/* package Example; */

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java.util.HashMap;
import java.lang.String;

parser code {:
	static FileInputStream FInStr = null;
	public static String fInName;

	public static void main(String argv[]) throws Exception {
		parser p;
		if (argv.length<1) {
			System.out.println ("Numero parametres incorrecte!");
		} else {
			fInName = argv[0];
			try {
				FInStr = new FileInputStream(fInName); //Obre fitxer
			} catch (FileNotFoundException e) {
				System.out.println (fInName + ": Impossible obrir fitxer!");
				return;
			}
			p = new parser(new Yylex (FInStr));
			p.parse();
		}
	}
:}


terminal OBRACE, CBRACE, OBRACKET, CBRACKET, COMMA, COLON, QUOTE;
terminal Integer INTEGER;
terminal Boolean BOOLEAN;
terminal String STRING;

non terminal HashMap json; 
non terminal HashMap json_type; 
non terminal HashMap json_data; 
non terminal HashMap json_attr;
non terminal List array; 
non terminal List array_data;
non terminal Object type;


json ::= json_type {::} | {::};
json_type ::= OBRACE json_data:j CBRACE 
		{:
			for (Object key : j.keySet()) {
        		System.out.println(key+" "+j.get(key).toString());
    		}
		:};
json_data ::= json_data:j COMMA json_attr:a 
		{:
			j.putAll(a);

			RESULT=j;
		:} 
	| json_attr:a 
		{:
			RESULT=a;
		:} 
	| 	{::};
json_attr ::= STRING:s COLON type:t 
		{:
			HashMap j = new HashMap<String,Object>();
			j.put(s,t);

			RESULT=j;
		:};

array ::= OBRACKET array_data:a CBRACKET 
		{: 
			//return array list
			RESULT=a; 
		:};
array_data ::= array_data:a COMMA type:t 
		{:
			//add objects to array list
			a.add((Object)t);
			
			RESULT=a;
		:} 
	| type:t 
		{:
			//create an array list of objects
			List a = new ArrayList<Object>();
			a.add((Object)t);

			RESULT=a;
		:}
	| 	{: 
			//return an empty array
			RESULT= new ArrayList<Object>(); 
		:};

type ::= STRING:s 
		{: 
			RESULT=(Object)s;
		:} 
	| INTEGER:i 
		{: 
			RESULT=(Object)i; 
		:}
	| BOOLEAN:b 
		{: 
			RESULT=(Object)b;
		:}
	| array:a 
		{: 
			RESULT=(Object)a; 
		:}
	| json_type 
		{:
			RESULT=""; 
	 	:};